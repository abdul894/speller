// Implements a dictionary's functionality

#include <ctype.h>
#include <stdbool.h>
#include <stdio.h>
#include <cs50.h>
#include <string.h>
#include <stdlib.h>
#include <strings.h>

#include "dictionary.h"

// Represents a node in a hash table
typedef struct node
{
    char word[LENGTH + 1];
    struct node *next;
}
node;

// TODO: Choose number of buckets in hash table
const unsigned int N = 26;

// Hash table
node *table[N];

//number of words loaded
unsigned int word_counter = 0;

// Returns true if word is in dictionary, else false
bool check(const char *word)
{
    // TODO
    int index = hash(word);
    node *cursor = NULL;
    cursor = table[index];

    while (cursor != NULL)
    {
        if (strcasecmp(cursor->word, word) == 0)
        {
            return true;
        }
        else
        {
            cursor = cursor->next;
        }
    }
    return false;
}

// Hashes word to a number
unsigned int hash(const char *word)
{
    // TODO: Improve this hash function

   char word_check[LENGTH + 1];
    for (int i = 0; i < strlen(word); i++)
    {
        word_check[i] = tolower(word[i]);
    }

    if (word_check[0] == 39)
    {
        int hash_value = 26;
        return hash_value;
    }
    int hash_value = (word_check[0] - 'a') % 26;
    return hash_value;

}

// Loads dictionary into memory, returning true if successful, else false
bool load(const char *dictionary)
{
    //Opening dictionary file for reading
    FILE *file = fopen(dictionary, "r");

    //checking the dictionary file if it's empty
    if (file == NULL)
    {
        return false;
    }

    //defining an array of Characters of size LENGTH
    char tmp[LENGTH + 1];

    //looping the process of read a word, allocating memory for it,
    while (fscanf(file, "%s", tmp) != EOF)
    {
        node *n = malloc(sizeof(node));
        if (n == NULL)
        {
            return false;
        }

        strcpy(n->word, tmp);
        word_counter++;

        int index = hash(tmp);

        if (table[index] == NULL)
        {
            n->next = NULL;
        }
        else
        {
            n->next = table[index]->next;
        }
    }
    fclose(file);
    return true;
}

// Returns number of words in dictionary if loaded, else 0 if not yet loaded
unsigned int size(void)
{
    // TODO
    return word_counter;
    return 0;
}

// Unloads dictionary from memory, returning true if successful, else false
bool unload(void)
{
    // TODO
    node *cursor = NULL;
    for (int i = 0; i < N; i++)
    {
        cursor = table[i];
        while (cursor != NULL)
        {
            node *tmp = cursor;
            cursor = cursor->next;
            free(tmp);
        }
    }
    return true;
}
